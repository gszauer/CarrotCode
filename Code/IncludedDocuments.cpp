#include "IncludedDocuments.h"

std::u32string GeneratePrompt() {
	std::u32string prompt;

	prompt += U"# Persona\n\n";
	prompt += U"You are a command line tool that reads the contents of multiple files provided in a markdown format.\n";
	prompt += U"You think about what the user requests with code, and do the action, but you never communicate directly to the user.\n";
	prompt += U"You only provide a single lua file that automates the actions you want to take.\n\n";

	prompt += U"# Output\n\n";
	prompt += U"You only provide a single lua file that automates the actions you want to take.\n";

	{
		prompt += U"## If the code is C++\n\n";
		prompt += U"If the code is C++ and you need to create a file that does not exist yet, call the CreateCppFile function.\nCreateCppFile takes only one argument, if you want to initialize a file call ReplaceCppFileContents, that function will create the file if it doesn't exist.\nThe nCreateCppFile function has this signature:\n";
		prompt += U"function CreateCppFile(stringFileName)\n";
		prompt += U"this function can make any kind of file, .h, .c, cpp, .hpp.Example calls :\n";
		prompt += U"CreateCppFile(\"NewFile.h\")\n";
		prompt += U"CreateCppFile(\"NewFile.cpp\")\n";
		prompt += U"CreateCppFile(\"SomeFile.hpp\")\n\n\n";
		prompt += U"If the code is C++ and the file exists, and you are replacing all the content of the file, call the ReplaceCppFileContent function :\n";
		prompt += U"function ReplaceCppFileContent(stringFileName, fileContentAsMultiLineStringLiteral)\n";
		prompt += U"For example, if you had this file names y.h :\n\n";
		prompt += U"```\n";
		prompt += U"#include \"x.h\"\n\n";
		prompt += U"void y() {\n\n";
		prompt += U"}\n";
		prompt += U"```\n";
		prompt += U"You could replace it with this call:\n";
		prompt += U"```\n";
		prompt += U"ReplaceCppFileContent(\"y.h\", [[\n";
		prompt += U"#include \"x.h\"\n\n";
		prompt += U"	void y() {\n";
		prompt += U"		printf(\"Updated!\");\n";
		prompt += U"	}\n";
		prompt += U"]] )\n";
		prompt += U"```\n";
		prompt += U"When replacing the content of a file, make sure the whole file is listed, nothing should be omited. Do not leave any TODOS, or comments along the lines of \"... same as before\"\n\n";
		prompt += U"If the code is C++ and you need to replace a class, call ReplaceCppClass :\n";
		prompt += U"function ReplaceCppClass(stringFileName, newClassAsMultiLineStringLiteral)\n";
		prompt += U"For example, if you had a class named Foo, in a file named Bar.h, you could replace it with a new definition like this :\n";
		prompt += U"```\n";
		prompt += U"ReplaceCppClass(\"Bar.h\", [[\n";
		prompt += U"	class Foo {\n";
		prompt += U"	public:\n";
		prompt += U"		Foo();\n";
		prompt += U"		virtual ~Foo();\n";
		prompt += U"		void Print();\n";
		prompt += U"	protected:\n";
		prompt += U"		std::string name;\n";
		prompt += U"	};\n";
		prompt += U"]] )\n";
		prompt += U"```\n";
		prompt += U"Classes should not have any inline functions.The class declaration should only have declarations in it.Function implementaitons hsould go ourside the class, as fully scoped functions.\n";
		prompt += U"With this function, you can't update just a part of a class. If you need to add a new function, or new variable, the entire class needs to be replaced.\n";
		prompt += U"If you have a new class, this is the function to call too.If the file doens't exist, this function should create it. If a class does not yet exist, ReplaceCppClass should create it (just nothing to delete)\n\n";
		prompt += U"If the code is C++ and you need to replace a function, call ReplaceCppFunction with the fully qualified function name.This can replace global functions, or member functions.It even works on constructors and destructors.\n";
		prompt += U"function ReplaceCppFunction(stringFileName, stringFunctionName, newFunctionDefinitionAsMultiLineString)\n";
		prompt += U"If you have to add a new function, call ReplaceCppFunction as it will create a new function if it does not exist yet(there is just nothing to repalce)\n";
		prompt += U"For example, if you want to implement the Print function of the Foo class above, it would be:\n";
		prompt += U"```\n";
		prompt += U"ReplaceCppFunction(\"Bar.h\", \"Foo::Print\", [[\n";
		prompt += U"	void Foo::Print() {\n";
		prompt += U"		printf(\"Hello World\");\n";
		prompt += U"	}\n";
		prompt += U"]] )\n";
		prompt += U"```\n";
		prompt += U"If you have to replace a function, always generate the full implementation of the function.Don't leave any DODOs or coments along the lines of: \"... same as before\"\n";
		prompt += U"You can choose if you want to replace a whole file, just update a class, or just update a function.\n";
		prompt += U"Don't use exceptions. Use smart pointers for memory management.\n\n";
	}
	{
		prompt += U"## If the code is Javascript\n\n";
		prompt += U"Use vanilla JS, not something like typescript.Use vanilla ES6. Avoid getters and setters, use get and set functions instead.\n\n";
		prompt += U"Only use javascript. No typescript, no jsx or anything like that. Vanilla javascript and ES6 only. \n";
		prompt += U"If the code is javascript and you need to create a file that does not exist yet, call the CreateJsFile function.\n";
		prompt += U"CreateJsFile takes only one argument, if you want to initialize a file call ReplaceJsFileContents, that function will create the file if it doesn't exist.\n";
		prompt += U"The CreateJsFile function has this signature:\n";
		prompt += U"function CreateJsFile(stringFileName)\n";
		prompt += U"This function can make any kind of file.Here is an example of how to call it :\n";
		prompt += U"CreateJsFile(\"NewFile.js\")\n\n\n";
		prompt += U"If the code is javascript and the file exists, and you are replacing all the content of the file, call the ReplaceJsFileContents function :\n";
		prompt += U"function ReplaceJsFileContents(stringFileName, fileContentAsMultiLineStringLiteral)\n";
		prompt += U"For example, if you had this file named a.js :\n";
		prompt += U"```\n";
		prompt += U"class A {\n";
		prompt += U"	constructor() { }\n\n";
		prompt += U"	DoStuff() {\n";
		prompt += U"		alert('A');\n";
		prompt += U"	}\n";
		prompt += U"}\n";
		prompt += U"```\n";
		prompt += U"You could replace it with this call:\n";
		prompt += U"```\n";
		prompt += U"ReplaceJsFileContents(\"a.js\", [[\n";
		prompt += U"	class A {\n";
		prompt += U"		constructor() {\n";
		prompt += U"		}\n\n";
		prompt += U"		DoStuff() {\n";
		prompt += U"			console.log('A');\n";
		prompt += U"		}\n";
		prompt += U"	}\n";
		prompt += U"]] )\n";
		prompt += U"```\n";
		prompt += U"When replacing the content of a file, make sure the whole file is listed, nothing should be omited.Do not leave any TODOS, or comments along the lines of \"... same as before\"\n\n";
		prompt += U"If the code is javascript and you need to replace a class, call ReplaceJsClass :\n";
		prompt += U"function ReplaceJsClass(stringFileName, newClassAsMultiLineStringLiteral)\n";
		prompt += U"For example, if you had a class named Hello, in a file named Greet.js, you could replace it with a new definition like this :\n";
		prompt += U"```\n";
		prompt += U"ReplaceJsClass(\"Greet.js\", [[\n";
		prompt += U"	class Hello {\n";
		prompt += U"		constructor() {\n";
		prompt += U"		}\n";
		prompt += U"		Greet() {\n";
		prompt += U"		}\n";
		prompt += U"	};\n";
		prompt += U"]] )\n";
		prompt += U"```\n";
		prompt += U"This function replaces the entire class including variables and member functions declared inside the class.\n\n";
		prompt += U"If the code is javacript and you need to replace a function, call ReplaceJsFunction.This can replace global functions, or member functions.\n";
		prompt += U"function ReplaceJsFunction(stringFileName, stringOptionaClassName, stringFunctionName, newFunctionDefinitionAsMultiLineString)\n";
		prompt += U"Note that this has more arguments.The file name, an optional class name, then  the function name, then the function.\n";
		prompt += U"If you have to add a new function, call ReplaceJsFunction as it will create a new function if it does not exist yet(there is just nothing to repalce)\n";
		prompt += U"For example, if you want to implement the Print function of a Foo class, it would be :\n";
		prompt += U"```\n";
		prompt += U"ReplaceJsFunction(\"Bar.js\", \"Foo\" \"Print\", [[\n";
		prompt += U"	Print() {\n";
		prompt += U"		console.log(\"Hello World\");\n";
		prompt += U"	}\n";
		prompt += U"]] )\n";
		prompt += U"```\n";
		prompt += U"Or you could replace a global function named Fizz like so :\n";
		prompt += U"```\n";
		prompt += U"ReplaceJsFunction(\"Bar.js\", \"\" \"Print\", [[\n";
		prompt += U"	Print() {\n";
		prompt += U"		console.log(\"Hello World\");\n";
		prompt += U"	}\n";
		prompt += U"]] )\n";
		prompt += U"```\n";
		prompt += U"Notice the empty string for class name in this case.\n";
		prompt += U"If you have to replace a function, always generate the full implementation of the function.Don't leave any DODOs or coments along the lines of: \"... same as before\"\n";
		prompt += U"Like with c++, with javascript, you can choose if you want to replace a whole file, just update a class, or just update a function.\n";
	}

	prompt += U"\n\n";

	return std::move(prompt);
}

std::shared_ptr<TextEdit::Document> CreateScriptAPIDocument() {
	std::shared_ptr<TextEdit::Document> document = TextEdit::Document::Create();
	document->Insert(U"# Lua API\n\n");
	document->Insert(U"The Lua API provides scripting capabilities for creating and modifying C++ and JavaScript source files within the text editor.\n");
	document->Insert(U"The API allows you to programmatically create files, replace file contents, and manipulate classes and functions.\n\n");
	document->Insert(U"## C++ API Functions\n\n");
	document->Insert(U"### CreateCppFile(filename)\n");
	document->Insert(U"Creates a new C++ source file in the editor.\n\n");
	document->Insert(U"* *Parameters:**\n");
	document->Insert(U"-`filename` (string) : Name of the file to create(e.g., \"MyClass.cpp\", \"header.h\")\n\n");
	document->Insert(U"* *Example : **\n");
	document->Insert(U"```lua\n");
	document->Insert(U"CreateCppFile(\"MyClass.h\")\n");
	document->Insert(U"CreateCppFile(\"MyClass.cpp\")\n");
	document->Insert(U"```\n\n");
	document->Insert(U"### ReplaceCppFileContent(filename, content)\n");
	document->Insert(U"Replaces the entire contents of a C++ file.Creates the file if it doesn't exist.\n\n");
	document->Insert(U"* *Parameters:**\n");
	document->Insert(U"-`filename` (string) : Name of the file\n");
	document->Insert(U"- `content` (string) : New file contents\n\n");
	document->Insert(U"* *Example : **\n");
	document->Insert(U"```lua\n");
	document->Insert(U"ReplaceCppFileContent(\"MyClass.h\", [[\n");
	document->Insert(U"#pragma once\n\n");
	document->Insert(U"class MyClass {\n");
	document->Insert(U"public:\n");
	document->Insert(U"	MyClass();\n");
	document->Insert(U"	void DoSomething();\n");
	document->Insert(U"};\n");
	document->Insert(U"]] )\n");
	document->Insert(U"```\n\n");
	document->Insert(U"### ReplaceCppClass(filename, classDefinition)\n");
	document->Insert(U"Finds and replaces a complete class definition in a C++ file.\n\n");
	document->Insert(U"* *Parameters :**\n");
	document->Insert(U"-`filename` (string) : Name of the file containing the class\n");
	document->Insert(U"- `classDefinition` (string) : New class definition(including the closing semicolon)\n\n");
	document->Insert(U"* *Example :**\n");
	document->Insert(U"```lua\n");
	document->Insert(U"ReplaceCppClass(\"MyClass.h\", [[\n");
	document->Insert(U"class MyClass {\n");
	document->Insert(U"public:\n");
	document->Insert(U"	MyClass();\n");
	document->Insert(U"	~MyClass();\n");
	document->Insert(U"	void DoSomething();\n");
	document->Insert(U"	void DoSomethingElse();\n");
	document->Insert(U"private:\n");
	document->Insert(U"	int m_value;\n");
	document->Insert(U"};\n");
	document->Insert(U"]] )\n");
	document->Insert(U"```\n\n");
	document->Insert(U"### ReplaceCppFunction(filename, functionName, functionDefinition)\n");
	document->Insert(U"Finds and replaces a function implementation.If the function doesn't exist, it's appended to the file.\n\n");
	document->Insert(U"* *Parameters:**\n");
	document->Insert(U"-`filename` (string) : Name of the file\n");
	document->Insert(U"- `functionName` (string) : Fully qualified function name(e.g., \"MyClass::DoSomething\")\n");
	document->Insert(U"- `functionDefinition` (string) : New function implementation\n\n");
	document->Insert(U"* *Example : **\n");
	document->Insert(U"```lua\n");
	document->Insert(U"--Replace a member function\n");
	document->Insert(U"ReplaceCppFunction(\"MyClass.cpp\", \"MyClass::DoSomething\", [[\n");
	document->Insert(U"void MyClass::DoSomething() {\n");
	document->Insert(U"	std::cout << \"Doing something!\" << std::endl;\n");
	document->Insert(U"	m_value = 42;\n");
	document->Insert(U"}\n");
	document->Insert(U"]] )\n\n");
	document->Insert(U"--Replace a constructor\n");
	document->Insert(U"ReplaceCppFunction(\"MyClass.cpp\", \"MyClass::MyClass\", [[\n");
	document->Insert(U"MyClass::MyClass():m_value(0) {\n");
	document->Insert(U"	// Initialize\n");
	document->Insert(U"}\n");
	document->Insert(U"]] )\n\n");
	document->Insert(U"--Replace a global function\n");
	document->Insert(U"ReplaceCppFunction(\"utils.cpp\", \"PrintMessage\", [[\n");
	document->Insert(U"void PrintMessage(const std::string & msg) {\n");
	document->Insert(U"	std::cout << \"Message: \" << msg << std::endl;\n");
	document->Insert(U"}\n");
	document->Insert(U"]] )\n");
	document->Insert(U"```\n\n");
	document->Insert(U"## JavaScript API Functions\n\n");
	document->Insert(U"### CreateJsFile(filename)\n");
	document->Insert(U"Creates a new JavaScript source file in the editor.\n\n");
	document->Insert(U"** Parameters:**\n");
	document->Insert(U"-`filename` (string) : Name of the file to create(e.g., \"app.js\", \"component.js\")\n\n");
	document->Insert(U"* *Example : **\n");
	document->Insert(U"```lua\n");
	document->Insert(U"CreateJsFile(\"app.js\")\n");
	document->Insert(U"CreateJsFile(\"utils.js\")\n");
	document->Insert(U"```\n\n");
	document->Insert(U"### ReplaceJsFileContents(filename, content)\n");
	document->Insert(U"Replaces the entire contents of a JavaScript file.Creates the file if it doesn't exist.\n");
	document->Insert(U"* *Parameters:**\n");
	document->Insert(U"-`filename` (string) : Name of the file\n");
	document->Insert(U"- `content` (string) : New file contents\n\n");
	document->Insert(U"* *Example : **\n");
	document->Insert(U"```lua\n");
	document->Insert(U"ReplaceJsFileContents(\"app.js\", [[\n");
	document->Insert(U"class App {\n");
	document->Insert(U"	constructor() {\n");
	document->Insert(U"		this.name = \"MyApp\";\n");
	document->Insert(U"	}\n\n");
	document->Insert(U"	start() {\n");
	document->Insert(U"		console.log(`Starting ${this.name}`);\n");
	document->Insert(U"	}\n");
	document->Insert(U"}\n\n");
	document->Insert(U"const app = new App();\n");
	document->Insert(U"app.start();\n");
	document->Insert(U"]])\n");
	document->Insert(U"```\n\n");
	document->Insert(U"### ReplaceJsClass(filename, classDefinition)\n");
	document->Insert(U"Finds and replaces a complete class definition in a JavaScript file.\n\n");
	document->Insert(U"** Parameters :**\n");
	document->Insert(U"-`filename` (string) : Name of the file containing the class\n");
	document->Insert(U"- `classDefinition` (string) : New class definition\n\n");
	document->Insert(U"** Example :**\n");
	document->Insert(U"```lua\n");
	document->Insert(U"ReplaceJsClass(\"app.js\", [[\n");
	document->Insert(U"class App {\n");
	document->Insert(U"	constructor() {\n");
	document->Insert(U"		this.name = \"MyApp\";\n");
	document->Insert(U"		this.version = \"2.0\";\n");
	document->Insert(U"	}\n\n");
	document->Insert(U"	start() {\n");
	document->Insert(U"		console.log(`Starting ${this.name} v${this.version}`);\n");
	document->Insert(U"	}\n\n");
	document->Insert(U"	stop() {\n");
	document->Insert(U"		console.log(\"Stopping app\");\n");
	document->Insert(U"	}\n");
	document->Insert(U"}\n");
	document->Insert(U"]])\n");
	document->Insert(U"```\n\n");
	document->Insert(U"### ReplaceJsFunction(filename, className, functionName, functionDefinition)\n");
	document->Insert(U"Finds and replaces a function.If the function doesn't exist, it's appended to the appropriate location.\n\n");
	document->Insert(U"* *Parameters:**\n");
	document->Insert(U"-`filename` (string) : Name of the file\n");
	document->Insert(U"- `className` (string) : Name of the class containing the method(use empty string \"\" for global functions)\n");
	document->Insert(U"- `functionName` (string) : Name of the function\n");
	document->Insert(U"- `functionDefinition` (string) : New function implementation\n\n");
	document->Insert(U"* *Example : **\n");
	document->Insert(U"```lua\n");
	document->Insert(U"--Replace a class method\n");
	document->Insert(U"ReplaceJsFunction(\"app.js\", \"App\", \"start\", [[\n");
	document->Insert(U"	start() {\n");
	document->Insert(U"		console.log(`Starting ${this.name} v${this.version}`);\n");
	document->Insert(U"		this.initializeModules();\n");
	document->Insert(U"		this.connectToServer();\n");
	document->Insert(U"	}\n");
	document->Insert(U"]] )\n\n");
	document->Insert(U"--Add a new class method(it will be inserted if not found)\n");
	document->Insert(U"ReplaceJsFunction(\"app.js\", \"App\", \"initializeModules\", [[\n");
	document->Insert(U"	initializeModules() {\n");
	document->Insert(U"		console.log(\"Initializing modules...\");\n");
	document->Insert(U"		// Module initialization code here\n");
	document->Insert(U"	}\n");
	document->Insert(U"]] )\n\n");
	document->Insert(U"--Replace a global function\n");
	document->Insert(U"ReplaceJsFunction(\"utils.js\", \"\", \"formatDate\", [[\n");
	document->Insert(U"function formatDate(date) {\n");
	document->Insert(U"	const options = { year: 'numeric', month : 'long', day : 'numeric' };\n");
	document->Insert(U"	return date.toLocaleDateString('en-US', options);\n");
	document->Insert(U"}\n");
	document->Insert(U"]] )\n");
	document->Insert(U"```\n\n");
	document->Insert(U"## Example Script\n\n");
	document->Insert(U"```lua\n");
	document->Insert(U"ReplaceJsFileContents(\"app.js\", [[\n");
	document->Insert(U"class Application {\n");
	document->Insert(U"	constructor() {\n");
	document->Insert(U"		this.config = {\n");
	document->Insert(U"			name: \"WebApp\",\n");
	document->Insert(U"			version : \"1.0.0\",\n");
	document->Insert(U"			debug : true\n");
	document->Insert(U"		};\n");
	document->Insert(U"		this.modules = new Map();\n");
	document->Insert(U"	}\n\n");
	document->Insert(U"	async initialize() {\n");
	document->Insert(U"		console.log(`Initializing ${this.config.name}...`);\n");
	document->Insert(U"		await this.loadModules();\n");
	document->Insert(U"		await this.setupRoutes();\n");
	document->Insert(U"	}\n\n");
	document->Insert(U"	async start() {\n");
	document->Insert(U"		await this.initialize();\n");
	document->Insert(U"		console.log(`${this.config.name is running!`});\n");
	document->Insert(U" }\n");
	document->Insert(U"}\n\n");
	document->Insert(U"const app = new Application();\n");
	document->Insert(U"export default app;\n");
	document->Insert(U"]])\n\n");
	document->Insert(U"ReplaceJsFileContents(\"logger.js\", [[\n");
	document->Insert(U"class Logger {\n");
	document->Insert(U"	constructor(prefix = \"APP\") {\n");
	document->Insert(U"		this.prefix = prefix;\n");
	document->Insert(U"		this.enabled = true;\n");
	document->Insert(U"	}\n\n");
	document->Insert(U"	log(...args) {\n");
	document->Insert(U"		if (this.enabled) {\n");
	document->Insert(U"			console.log(`[${this.prefix}]`, ...args);\n");
	document->Insert(U"		}\n");
	document->Insert(U"	}\n\n");
	document->Insert(U"	error(...args) {\n");
	document->Insert(U"		console.error(`[${this.prefix}] ERROR:`, ...args);\n");
	document->Insert(U"	}\n");
	document->Insert(U"}\n\n");
	document->Insert(U"export default Logger;\n");
	document->Insert(U"]])\n\n");
	document->Insert(U"ReplaceJsFunction(\"app.js\", \"Application\", \"initialize\", [[\n");
	document->Insert(U"	async initialize() {\n");
	document->Insert(U"		// Import and setup logger\n");
	document->Insert(U"		const Logger = await import('./logger.js');\n");
	document->Insert(U"		this.logger = new Logger.default('APP');\n\n");
	document->Insert(U"		this.logger.log(`Initializing ${this.config.name}...`);\n");
	document->Insert(U"		await this.loadModules();\n");
	document->Insert(U"		await this.setupRoutes();\n");
	document->Insert(U"		this.logger.log('Initialization complete');\n");
	document->Insert(U"	}\n");
	document->Insert(U"]])\n");
	document->Insert(U"```\n\n");
	document->Insert(U"## Best Practices\n\n");
	document->Insert(U"1. * *Use multiline strings * *: Lua's `[[...]]` syntax is perfect for code content\n");
	document->Insert(U"2. * *Check for errors** : The \"Lua Error\" tab will show any issues\n");
	document->Insert(U"4. * *Incremental updates * *: You can run multiple scripts to build up your codebase\n");
	document->Insert(U"5. * *Preserve formatting * *: The API preserves your code formatting exactly as provided\n\n");
	document->Insert(U"## Error Handling\n\n");
	document->Insert(U"All errors are automatically displayed in a \"Lua Error\" tab within the editor.This includes :\n");
	document->Insert(U"-Syntax errors in your Lua scripts\n");
	document->Insert(U"- Runtime errors during script execution\n");
	document->Insert(U"- Errors from API functions(e.g., file not found, class not found)\n\n");
	document->Insert(U"## Tips\n\n");
	document->Insert(U"- When replacing functions that don't exist, they are automatically appended to the appropriate location\n");
	document->Insert(U"- Class methods are inserted before the closing brace of the class\n");
	document->Insert(U"- Global functions are appended to the end of the file\n");
	document->Insert(U"- All regex operations are Unicode - aware and handle UTF - 8 / UTF - 32 properly\n");
	document->Insert(U"- The editor will automatically display any created or modified files in tabs\n");
	document->Insert(U"- Each time you run a script, it creates an undo step");

	document->SetSource("Script API", true);
	document->MarkClean();
	document->SetHighlighter(TextEdit::Highlighter::Text);

	return document;
}

std::shared_ptr<TextEdit::Document> CreateHowToDocument() {
	std::shared_ptr<TextEdit::Document> document = TextEdit::Document::Create();

	document->Insert(U"To learn the vibe coded workflow, Let's implement a basic game together. A simple pong game.\n\n\n");
	document->Insert(U"First, close all tabs.Then, create a new file.\n");
	document->Insert(U"We're going to write the intial prompt in this new file, something like:\n");
	document->Insert(U"```\n");
	document->Insert(U"Create a pong game using javascript and html. It should be powered by phaserjs and use no external dependancies (phaser can be linked from cdn). The game should be in game.js, not html.\n");
	document->Insert(U"```\n\n\n");
	document->Insert(U"Now select AUTOMATION > Copy prompt\n");
	document->Insert(U"This will copy an AI prompt to your clipboard.Paste it in your favorite AI and run it.\n");
	document->Insert(U"The AI will run, and it will return some lua code.\n\n\n");
	document->Insert(U"You can close the prompt tab, or just delete everything from it.Either way, you need an open empty tab.\n");
	document->Insert(U"Paste the lua code from the previous step into this file, then select AUTOMATION > Execute file\n");
	document->Insert(U"That should take all necesary actions on your behalf.\n\n\n");
	document->Insert(U"--- Some notes to keep in mind---\n");
	document->Insert(U"All future prompts will include every open file.Always start a new chat, all relevant context is in the prompt.\n");
	document->Insert(U"The only file excluded from the prompt is the one active while when Copy Prompt or Execute  File is selected.\n");
	document->Insert(U"Personally, i leave the first tab as my prompt tab and just keep re - using it.\n");
	document->Insert(U"---\n\n\n");
	document->Insert(U"Save your files, and thats it!You should now have a phaser powered pong game.\n");
	document->Insert(U"Let's ask AI to make some edits to test out the \"automated\" editing features.\n");
	document->Insert(U"Run this prompt\n");
	document->Insert(U"```\n");
	document->Insert(U"The final game needs to be full screen and fully run on mobile devices.\n");
	document->Insert(U"Switch the game to use a vertical orientation, player on bottom, ai on top\n");
	document->Insert(U"Use 🏀 for the ball icon\n");
	document->Insert(U"```\n");
	document->Insert(U"Again paste that into your favorite AI, then run the resulting lua script.\n");


	document->SetSource("How To", true);
	document->MarkClean();
	document->SetHighlighter(TextEdit::Highlighter::Text);

	return document;
}

std::shared_ptr<TextEdit::Document> CreateAboutDocument() {
	std::shared_ptr<TextEdit::Document> document = TextEdit::Document::Create();
	document->Insert(U"https://github.com/gszauer/CarrotCode\n\n");
	document->Insert(U"Carrot.Code is my attempt at writing an IDE to streamline code prompt generation.\n");
	document->Insert(U"This editor bundles all your code into one AI prompt, it instructs the AI to reply in a way that it's work can be integrated automatically.\n");
	document->Insert(U"The editor is very simple, it was inspired by lite: https://github.com/rxi/lite\n\n");

	document->Insert(U"The editor is not project or directory based, what's loaded into memory is all that exists to the editor.\n");
	document->Insert(U"AUTOMATION > Copy Prompt: will treat the current file as a prompt for AI, and all other files as context.\n");
	document->Insert(U"AUTOMATION > Execute File: will execute the automation code returned from the prompt, affecting open documents.\n\n");


	document->Insert(U"Some parts of this application where built by AI 🤖.\nSpecifically, the DocumentContainer which handles tab logic for the multi document interface.\n\n");

	document->SetSource("About", true);
	document->MarkClean();
	document->SetHighlighter(TextEdit::Highlighter::Text);

	return document;
}

std::shared_ptr<TextEdit::Document> CreateWelcomeDocument() {
	std::shared_ptr<TextEdit::Document> document = TextEdit::Document::Create();
	document->Insert(U"/*A scriptable editor with syntax highlighting, undo / redo and Unicode support 🤌.\n    At it's core, the editor is implemented like so: */\n\n");
	{
		document->Insert(U"#include <vector>\n");
		document->Insert(U"#include <string>\n");
		document->Insert(U"#include <algorithm>\n\n");
		document->Insert(U"class TextEditor {\n");
		document->Insert(U"	std::vector<std::u32string> Lines;\n\n");
		document->Insert(U"	TextEditor() {\n");
		document->Insert(U"		// Initialize with one empty line\n");
		document->Insert(U"		Lines.push_back(U\"\");\n");
		document->Insert(U"	}\n\n");
		document->Insert(U"	void Insert(unsigned int line, unsigned int column, const std::u32string& text) {\n");
		document->Insert(U"		// Ensure we have enough lines\n");
		document->Insert(U"		while (Lines.size() <= line) {\n");
		document->Insert(U"			Lines.push_back(U\"\");\n");
		document->Insert(U"		}\n\n");
		document->Insert(U"		// Get the target line\n");
		document->Insert(U"		std::u32string& targetLine = Lines[line];\n\n");
		document->Insert(U"		// Ensure column is within bounds\n");
		document->Insert(U"		if (column > targetLine.length()) {\n");
		document->Insert(U"			// Pad with spaces if column is beyond current line length\n");
		document->Insert(U"			targetLine.append(column - targetLine.length(), U' ');\n");
		document->Insert(U"		}\n\n");
		document->Insert(U"		// Check if text contains newlines\n");
		document->Insert(U"		size_t newlinePos = text.find(U'\\n');\n\n");
		document->Insert(U"		if (newlinePos == std::u32string::npos) {\n");
		document->Insert(U"			// No newlines, simple insertion\n");
		document->Insert(U"			targetLine.insert(column, text);\n");
		document->Insert(U"		}\n");
		document->Insert(U"		else {\n");
		document->Insert(U"			// Text contains newlines, need to split\n");
		document->Insert(U"			std::vector<std::u32string> textLines;\n");
		document->Insert(U"			size_t start = 0;\n\n");
		document->Insert(U"			// Split text by newlines\n");
		document->Insert(U"			while (newlinePos != std::u32string::npos) {\n");
		document->Insert(U"				textLines.push_back(text.substr(start, newlinePos - start));\n");
		document->Insert(U"				start = newlinePos + 1;\n");
		document->Insert(U"				newlinePos = text.find(U'\\n', start);\n");
		document->Insert(U"			}\n");
		document->Insert(U"			textLines.push_back(text.substr(start)); // Last part after final newline\n\n");
		document->Insert(U"			// Save the part of the line after the insertion point\n");
		document->Insert(U"			std::u32string remainingText = targetLine.substr(column);\n\n");
		document->Insert(U"			// Insert first part into current line\n");
		document->Insert(U"			targetLine = targetLine.substr(0, column) + textLines[0];\n\n");
		document->Insert(U"			// Insert middle lines\n");
		document->Insert(U"			for (size_t i = 1; i < textLines.size() - 1; ++i) {\n");
		document->Insert(U"				Lines.insert(Lines.begin() + line + i, textLines[i]);\n");
		document->Insert(U"			}\n\n");
		document->Insert(U"			// Handle last line\n");
		document->Insert(U"			if (textLines.size() > 1) {\n");
		document->Insert(U"				Lines.insert(Lines.begin() + line + textLines.size() - 1, textLines.back() + remainingText);\n");
		document->Insert(U"			}\n");
		document->Insert(U"		}\n");
		document->Insert(U"	}\n\n");
		document->Insert(U"	void Remove(unsigned int firstLine, unsigned int firstColumn, unsigned int lastLine, unsigned int lastColumn) {\n");
		document->Insert(U"		// Validate bounds\n");
		document->Insert(U"		if (firstLine >= Lines.size() || lastLine >= Lines.size()) {\n");
		document->Insert(U"			return; // Invalid range\n");
		document->Insert(U"		}\n\n");
		document->Insert(U"		// Ensure first position comes before last position\n");
		document->Insert(U"		if (firstLine > lastLine || (firstLine == lastLine && firstColumn > lastColumn)) {\n");
		document->Insert(U"			std::swap(firstLine, lastLine);\n");
		document->Insert(U"			std::swap(firstColumn, lastColumn);\n");
		document->Insert(U"		}\n\n");
		document->Insert(U"		// Clamp columns to valid ranges\n");
		document->Insert(U"		firstColumn = std::min(firstColumn, (unsigned int)Lines[firstLine].length());\n");
		document->Insert(U"		lastColumn = std::min(lastColumn, (unsigned int)Lines[lastLine].length());\n\n");
		document->Insert(U"		if (firstLine == lastLine) {\n");
		document->Insert(U"			// Removal within a single line\n");
		document->Insert(U"			Lines[firstLine].erase(firstColumn, lastColumn - firstColumn);\n");
		document->Insert(U"		}\n");
		document->Insert(U"		else {\n");
		document->Insert(U"			// Multi-line removal\n");
		document->Insert(U"			// Keep the part before firstColumn on firstLine\n");
		document->Insert(U"			std::u32string newFirstLine = Lines[firstLine].substr(0, firstColumn);\n\n");
		document->Insert(U"			// Append the part after lastColumn on lastLine\n");
		document->Insert(U"			if (lastColumn < Lines[lastLine].length()) {\n");
		document->Insert(U"				newFirstLine += Lines[lastLine].substr(lastColumn);\n");
		document->Insert(U"			}\n\n");
		document->Insert(U"			// Update the first line\n");
		document->Insert(U"			Lines[firstLine] = newFirstLine;\n\n");
		document->Insert(U"			// Remove the lines in between (including lastLine)\n");
		document->Insert(U"			Lines.erase(Lines.begin() + firstLine + 1, Lines.begin() + lastLine + 1);\n");
		document->Insert(U"		}\n\n");
		document->Insert(U"		// Ensure at least one line remains\n");
		document->Insert(U"		if (Lines.empty()) {\n");
		document->Insert(U"			Lines.push_back(U\"\");\n");
		document->Insert(U"		}\n");
		document->Insert(U"	}\n");
		document->Insert(U"};");
	}
	document->SetSource("Welcome", true);
	document->MarkClean();

	return document;
}